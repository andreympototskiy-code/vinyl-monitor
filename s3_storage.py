#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º state.json
"""
import json
import boto3
from botocore.exceptions import ClientError, NoCredentialsError
from pathlib import Path
from typing import Dict, Set
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class S3Storage:
    def __init__(self):
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã S3 –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.endpoint_url = "https://s3.twcstorage.ru"
        self.bucket_name = "6ddcc6a4-ac782675-1c0e-4e0c-b26f-32ab5d7e6ff3"
        self.region = "ru-1"
        self.object_key = "vinyl-monitor/state.json"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º S3 –∫–ª–∏–µ–Ω—Ç
        self.s3_client = boto3.client(
            's3',
            endpoint_url=self.endpoint_url,
            region_name=self.region,
            aws_access_key_id=self.access_key,
            aws_secret_access_key=self.secret_key
        )
    
    @property
    def access_key(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç S3 Access Key –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        import os
        key = os.getenv('S3_ACCESS_KEY')
        if not key:
            raise ValueError("S3_ACCESS_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return key
    
    @property
    def secret_key(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç S3 Secret Access Key –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        import os
        key = os.getenv('S3_SECRET_KEY')
        if not key:
            raise ValueError("S3_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return key
    
    def download_state(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç state.json –∏–∑ S3"""
        try:
            response = self.s3_client.get_object(
                Bucket=self.bucket_name,
                Key=self.object_key
            )
            content = response['Body'].read().decode('utf-8')
            return json.loads(content)
        except ClientError as e:
            error_code = e.response['Error']['Code']
            if error_code == 'NoSuchKey':
                logger.info("state.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                return {"known_items": {}}
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ S3: {e}")
                raise
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ S3: {e}")
            raise
    
    def upload_state(self, state_data: Dict) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç state.json –≤ S3"""
        try:
            json_content = json.dumps(state_data, ensure_ascii=False, indent=2)
            
            self.s3_client.put_object(
                Bucket=self.bucket_name,
                Key=self.object_key,
                Body=json_content.encode('utf-8'),
                ContentType='application/json'
            )
            
            logger.info("state.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {e}")
            return False
    
    def load_known_items(self) -> Set[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö ID –∏–∑ S3"""
        try:
            data = self.download_state()
            if "known_items" in data and isinstance(data["known_items"], dict):
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º normalize_url –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
                from vinyl_monitor import normalize_url
                return {normalize_url(item_id) for item_id in data["known_items"].keys()}
            else:
                return set()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            return set()
    
    def save_new_items(self, known_ids: Set[str], new_items: list) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ S3"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            existing_data = self.download_state()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if new_items:
                from datetime import datetime
                current_time = datetime.now().isoformat()
                
                for item in new_items:
                    item_id = item.get("id", "")
                    if item_id:
                        from vinyl_monitor import normalize_url
                        normalized_id = normalize_url(item_id)
                        existing_data.setdefault("known_items", {})[normalized_id] = {
                            "added_at": current_time,
                            "title": item.get("title", ""),
                            "source": item.get("source", "")
                        }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ S3
            return self.upload_state(existing_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
            response = self.s3_client.list_objects_v2(
                Bucket=self.bucket_name,
                Prefix=self.object_key.rsplit('/', 1)[0],  # –ü–∞–ø–∫–∞
                MaxKeys=1
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3: {e}")
            return False


if __name__ == "__main__":
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    storage = S3Storage()
    if storage.test_connection():
        print("‚úÖ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        state = storage.download_state()
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(state.get('known_items', {}))} –ø–æ–∑–∏—Ü–∏–π –∏–∑ S3")
    else:
        print("‚ùå S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
